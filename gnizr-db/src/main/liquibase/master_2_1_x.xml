<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog logicalFilePath="classpath:/master_2_1_x.xml"
                   xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.0.xsd">

	<changeSet id="sp-user" author="vrebesbyrd@gmail.com">
		<sql splitStatements="false">
            --------------------------------------------------------------
            -- PROCEDURE: getUser(id)
            -- INPUT: id INTEGER
            -- OUTPUT: NONE
            CREATE OR REPLACE FUNCTION getUser(uid INTEGER) RETURNS refcursor AS $c$
            DECLARE
              ref refcursor;
            BEGIN
              OPEN ref FOR SELECT * FROM "user" as U WHERE U.id=uid;
              RETURN ref;
            END;
            $c$ LANGUAGE plpgsql;

            --------------------------------------------------------------
            -- PROCEDURE: findUserUsername
            -- INPUT: username
            -- OUTPUT: NONE
            CREATE OR REPLACE FUNCTION findUserUsername(username VARCHAR(45)) RETURNS refcursor AS $c$
            DECLARE
              ref refcursor;
            BEGIN
              OPEN ref FOR SELECT * FROM "user" as U WHERE U.username=username;
              RETURN ref;
            END;
            $c$ LANGUAGE plpgsql;

            --------------------------------------------------------------
            -- PROCEDURE: findAllUsers
            -- INPUT: NONE
            -- OUTPUT: NONE
            CREATE OR REPLACE FUNCTION findAllUsers() RETURNS refcursor AS $c$
            DECLARE
              ref refcursor;
            BEGIN
              OPEN ref FOR SELECT * FROM "user" as U WHERE U.username != "gnizr";
              RETURN ref;
            END;
            $c$ LANGUAGE plpgsql;

            --------------------------------------------------------------
            -- PROCEDURE: findUserUnamePwd
            -- INPUT: username
            --        password
            -- OUTPUT: NONE
            CREATE OR REPLACE FUNCTION findUserUnamePwd(username VARCHAR(45), password VARCHAR(45)) RETURNS refcursor AS $c$
            DECLARE
              ref refcursor;
            BEGIN
              OPEN ref FOR SELECT * FROM "user" as U WHERE U.username=username AND U.password=MD5(password);
            END;
            $c$ LANGUAGE plpgsql;

            --------------------------------------------------------------
            -- PROCEDURE: deleteUser
            -- INPUT: uid
            -- OUTPUT NONE
            CREATE OR REPLACE FUNCTION deleteUser(uid INTEGER) RETURNS void AS $c$
            BEGIN
              DELETE FROM search_idx
              WHERE search_idx.bookmark_id in (SELECT id FROM bookmark WHERE bookmark.user_id = uid);
              DELETE FROM bookmark
              WHERE bookmark.user_id = uid;
              DELETE FROM "user" as U
              WHERE U.id=uid;
            END;
            $c$ LANGUAGE plpgsql;

            --------------------------------------------------------------
            -- PROCEDURE: createUser
            -- INPUT: username
            --        password,
            --        fullname,
            --        email,
            --        createdOn,
            --        status
            -- OUTPUT: NONE
            CREATE OR REPLACE FUNCTION createUser(IN username VARCHAR(45), IN password VARCHAR(45),
                                                  IN fullname VARCHAR(100),IN email VARCHAR(50),
                                                  IN createdOn timestamp with time zone,
                                                  IN status INTEGER) RETURNS integer AS $c$
            DECLARE
              newid integer;
            DECLARE `USEREXISTS` CONDITION FOR SQLSTATE '23000';
            DECLARE EXIT HANDLER FOR `USEREXISTS` ROLLBACK;
            BEGIN
              INSERT INTO "user"(username,password,fullname,email,created_on,acct_status) VALUES (username,MD5(password),fullname,email,createdOn,status) RETURNING id INTO newid;
              RETURN newid;
            END;
            $c$ LANGUAGE plpgsql;

            --------------------------------------------------------------
            -- PROCEDURE: updateUser
            -- INPUT: username
            --        password
            --        fullname
            --        email
            --        createdOn
            --        status
            -- OUTPUT: NONE
            CREATE OR REPLACE FUNCTION updateUser(IN id INTEGER,
                                                  IN username VARCHAR(45),
                                                  IN password VARCHAR(45),
                                                  IN fullname VARCHAR(100),
                                                  IN email VARCHAR(50),
                                                  IN createdOn timestamp with time zone,
                                                  IN status INTEGER) RETURNS void AS $c$

            BEGIN
              IF CHAR_LENGTH(password) > 0 THEN
                UPDATE "user" as U SET
                U.username = username,
                U.password = MD5(password),
                U.fullname = fullname,
                U.email = email,
                U.created_on = created_on,
                U.acct_status = status WHERE U.id=id;
              ELSE
                UPDATE "user" as U SET
                U.username = username,
                U.fullname = fullname,
                U.email = email,
                U.created_on = createdOn,
                U.acct_status = status WHERE U.id=id;
              END IF;
            END;
            $c$ LANGUAGE plpgsql;

            --------------------------------------------------------------
            -- PROCEDURE: listUserStats
            -- INPUT: NONE
            -- OUTPUT: NONE
            CREATE OR REPLACE FUNCTION listUserStats() RETURNS refcursor AS $c$
            DECLARE
              ref refcursor;
            BEGIN
              OPEN ref FOR SELECT *,
              (SELECT count(*) FROM bookmark WHERE bookmark.user_id = U.id) as total_number_bookmark,
              (SELECT count(*) FROM user_tag_idx WHERE user_tag_idx.user_id = U.id) as total_number_tag
              FROM "user" as U ORDER BY U.username ASC;
            END;
            $c$ LANGUAGE plpgsql;

        </sql>
	</changeSet>

</databaseChangeLog>